𝐎𝐎𝐏 𝐂𝐨𝐧𝐜𝐞𝐩𝐭 සහ 𝐏𝐫𝐢𝐧𝐜𝐢𝐩𝐥𝐞𝐬 𝐄𝐱𝐩𝐥𝐚𝐢𝐧𝐞𝐝 🖥️

OOP කියන්නේ Object-Oriented Programming කියන එකේ සාරාංශය. නමෙන්ම තේරෙන්නේ, Objects පදනම් කරගෙන Code Design සහ Development කරන Programming Style එකක්. Real World එකේ තියෙන ඕනෑම දෙයක් Object එකක් විදිහට හඳුනාගන්න පුළුවන්. 
OOP වලින් අපිට DRY Principle (Don’t Repeat Yourself) අනුගමනය කරන්න පුළුවන්. එය කියන්නේ නැවත නැවත එකම Code කෑල්ල ලියන්න අවශ්‍ය නොවීමයි. මෙම විධියෙන් Code Simplify කරලා Maintainability සහ Efficiency වැඩි කරලා තියෙනවා. 

OOP වල මූලික ස්ථම්භ 4: 

𝐄𝐧𝐜𝐚𝐩𝐬𝐮𝐥𝐚𝐭𝐢𝐨𝐧: Data සහ Behavior එකට එක්කරලා Class කියන එකක් නිර්මාණය කරනවා. මෙය Object එකේ අභ්‍යන්තර විශේෂාංග Direct Access කිරීම සීමා කරන අතර, ඒවා private කර, අවශ්‍ය වුවහොත් getters සහ setters මගින් Access කිරීමට ඉඩ ලබාදේ. මේකේ ප්‍රතිඵලයක් වශයෙන්, Object එකේ Data Integrity එක සහ Security එක රඳාගෙන යන්න පුළුවන්. 

𝐀𝐛𝐬𝐭𝐫𝐚𝐜𝐭𝐢𝐨𝐧: අවශ්‍ය විශේෂාංග පමණක් Highlight කරලා, අනිසි Implementation Details පිටවෙනවා. මෙය System එකේ Complexity අඩු කරනවා. Abstraction භාවිතයෙන් Interface සහ Abstract Classes මගින් Developers ලාට අවශ්‍ය Methods හඳුනාගන්නත් Implementation Hide කරන්නත් පුළුවන්.

𝐈𝐧𝐡𝐞𝐫𝐢𝐭𝐚𝐧𝐜𝐞: Super Class එකක Features Sub Class එකකට උරුම දෙනවා. උදාහරණයක් ලෙස, Class B extends Class A කියලා තිබුනොත්, A වල Methods සහ Attributes, B එකට උරුම වේ. මෙය Code Reusability වැඩි කරනු ලබයි, ඒත් Multiple Inheritance භාවිතයදී Complexity වැඩි විය හැක.

𝐏𝐨𝐥𝐲𝐦𝐨𝐫𝐩𝐡𝐢𝐬𝐦: එකම Method එක Different Context වලදී විවිධ ස්වරූප ගන්නේ කොහොමද කියලා. Poly කියන්නේ "අනේක" කියන අර්ථයටත්, Morph කියන්නේ "ස්වරූප" කියන අර්ථයටත් යොමු වෙයි. Polymorphism තුලදී, Method Overloading (𝐶𝑜𝑚𝑝𝑖𝑙𝑒-𝑡𝑖𝑚𝑒 𝑃𝑜𝑙𝑦𝑚𝑜𝑟𝑝ℎ𝑖𝑠𝑚) සහ Method Overriding (𝑅𝑢𝑛𝑡𝑖𝑚𝑒 𝑃𝑜𝑙𝑦𝑚𝑜𝑟𝑝ℎ𝑖𝑠𝑚) වැනි Concepts භාවිතා කරනවා. 

𝐌𝐞𝐭𝐡𝐨𝐝 𝐎𝐯𝐞𝐫𝐥𝐨𝐚𝐝𝐢𝐧𝐠: Signature එක වෙනස් කරලා එකම නමින් Methods එකට වැඩි විශේෂාංග ලබාගන්න පුළුවන්. Signature එක කියන්නේ Method Name + Parameter List කියන එක. මෙය Static Polymorphism නමින් හැඳින්වෙනවා. 
උදාහරණයක් ලෙස, `add(int a, int b)` method එකකින් Two Numbers එකතු කරන්නෙ. ඒත් `add(int a, int b, int c)` වලින් Three Numbers එකතු කරන්න පුළුවන්. 

𝐌𝐞𝐭𝐡𝐨𝐝 𝐎𝐯𝐞𝐫𝐫𝐢𝐝𝐢𝐧𝐠: Method Overriding වලට ක්ලාස් දෙකක් අවශ්‍යයි, එම ක්ලාස් දෙක inherit වෙලා තිබිය යුතුයි. මේක Dynamic Polymorphism නමින් හැඳින්වෙනවා.
උදාහරණයක් ලෙස, Super Class එකේ `display()` method එක Sub Class එකේ ලියා, එය වෙනස් කරලා භාවිතා කරන්න පුළුවන්. මෙය Runtime එකේදී Object එකේ Type එකට අනුව Execute වෙනවා.

OOP Languages: 𝗝𝗮𝘃𝗮 | 𝗣𝘆𝘁𝗵𝗼𝗻 | 𝗖++ | 𝗖# 
